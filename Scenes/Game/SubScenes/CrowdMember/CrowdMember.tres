[gd_resource type="VisualShader" load_steps=9 format=3 uid="uid://dnr2kkxxppy7x"]

[sub_resource type="VisualShaderNodeTextureParameterTriplanar" id="VisualShaderNodeTextureParameterTriplanar_h13un"]
output_port_for_preview = 0
parameter_name = "TextureParameterTriplanar"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_0xsr5"]
expanded_output_ports = [0]
input_name = "normal"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_dbcku"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_klxvf"]
function = 0

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_cymxo"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_8x0e4"]
input_name = "vertex"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_yq7be"]
input_name = "normal"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_i6d5x"]

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;

uniform sampler2D TextureParameterTriplanar;


// TextureParameterTriplanar
	vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
		vec4 samp = vec4(0.0);
		samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
		samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
		samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
		return samp;
	}

	uniform vec3 triplanar_scale = vec3(1.0, 1.0, 1.0);
	uniform vec3 triplanar_offset;
	uniform float triplanar_sharpness = 0.5;

	varying vec3 triplanar_power_normal;
	varying vec3 triplanar_pos;

void vertex() {
// TextureParameterTriplanar
	{
		triplanar_power_normal = pow(abs(NORMAL), vec3(triplanar_sharpness));
		triplanar_power_normal /= dot(triplanar_power_normal, vec3(1.0));
		triplanar_pos = VERTEX * triplanar_scale + triplanar_offset;
		triplanar_pos *= vec3(1.0, -1.0, 1.0);
	}
// Input:3
	float n_out3p0 = TIME;


// FloatFunc:4
	float n_out4p0 = sin(n_out3p0);


// VectorCompose:5
	float n_in5p0 = 0.00000;
	float n_in5p1 = 0.00000;
	vec3 n_out5p0 = vec3(n_in5p0, n_in5p1, n_out4p0);


// Input:6
	vec3 n_out6p0 = VERTEX;


// VectorOp:9
	vec3 n_out9p0 = n_out5p0 + n_out6p0;


// Output:0
	VERTEX = n_out9p0;


}

void fragment() {
// TextureParameterTriplanar:2
	vec4 n_out2p0 = triplanar_texture(TextureParameterTriplanar, triplanar_power_normal, triplanar_pos);


// Output:0
	ALBEDO = vec3(n_out2p0.xyz);


}
"
nodes/vertex/0/position = Vector2(960, 180)
nodes/vertex/2/node = SubResource("VisualShaderNodeInput_0xsr5")
nodes/vertex/2/position = Vector2(-60, 120)
nodes/vertex/3/node = SubResource("VisualShaderNodeInput_dbcku")
nodes/vertex/3/position = Vector2(-20, 280)
nodes/vertex/4/node = SubResource("VisualShaderNodeFloatFunc_klxvf")
nodes/vertex/4/position = Vector2(260, 300)
nodes/vertex/5/node = SubResource("VisualShaderNodeVectorCompose_cymxo")
nodes/vertex/5/position = Vector2(500, 180)
nodes/vertex/6/node = SubResource("VisualShaderNodeInput_8x0e4")
nodes/vertex/6/position = Vector2(80, 520)
nodes/vertex/8/node = SubResource("VisualShaderNodeInput_yq7be")
nodes/vertex/8/position = Vector2(80, 420)
nodes/vertex/9/node = SubResource("VisualShaderNodeVectorOp_i6d5x")
nodes/vertex/9/position = Vector2(740, 360)
nodes/vertex/connections = PackedInt32Array(3, 0, 4, 0, 5, 0, 9, 0, 6, 0, 9, 1, 9, 0, 0, 0, 4, 0, 5, 2)
nodes/fragment/0/position = Vector2(500, 160)
nodes/fragment/2/node = SubResource("VisualShaderNodeTextureParameterTriplanar_h13un")
nodes/fragment/2/position = Vector2(-100, 120)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0)
